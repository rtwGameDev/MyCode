Đề bài đếm số cách chia mảng làm 3 mà không có mảng nào bị rỗng, mảng chia ra là  phần tử liên tiếp nhau.







[LinkToSubmit](https://codeforces.com/problemset/problem/466/C)
[Tags] DP, binary search, brute force, data struc, two pointer (giải thuần dp cũng được) 






[Hint] muốn chia mảng ra thành 3 phần thì trước hết phải biết tổng phần tử mảng, xét xem phần tử đó có chia hết cho 3 hay không rồi tới bước tiếp.
Thay vì chia mảng ra làm 3, thì ta chia làm 2, xét từ 2 đến n-1, ta chỉ cần xem nó có bằng  S/3*2 không tức là 2 phần 3 của tổng mảng, rồi các chỗ bằng 1/3 tổng mảng trước chính là đáp án
ví dụ 0 1 -1 0
với tổng = 0
chỗ i = 3 thì ta thấy nó = 2/3 S(không xét i = 1 vì chỉ xét từ 2 đến n-1), và những chỗ = 1/3 S là đáp án vậy chỗ i = 1 là đáp án tức là ta chọn 1 -> 1, 2 -> 3 và còn lại(4)
[code]:
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 5e5 + 5;
int n;
ll a[N], S = 0;
map<ll,ll> m;
void Solve(){
    ll S1 = S/3*2, S2 = a[1], S3 = S/3;
    ll res = 0;
    m[a[1]] = 1;
    for(int i = 2; i<n; i++){
        S2 += a[i];
        if(S2 == S1) res += m[S3];
        //cout<<S2<<' '<<m[S3]<<endl;
        m[S2]++;
    }
    cout<<res;
}
int main(){
    cin>>n;
    for(int i = 1; i<=n; i++) cin>>a[i], S += a[i];
    if(S%3){
        cout<<0;
        return 0;
    }
    Solve();
    return 0;
}
